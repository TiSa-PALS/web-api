<?php


namespace TiSa\InventoryModule;


use Nette\Application\UI\Form;
use Nette\NotImplementedException;
use Nette\Utils\ArrayHash;
use TiSa\Components\Grid\BaseGrid;
use TiSa\Components\Grid\ItemsGrid;
use TiSa\ORM\Models\ModelItem;

class ItemPresenter extends EntityPresenter {

    private function getAllProducers() {
        $rows = $this->database->table(\DBTable::TABLE_PRODUCT);

        foreach ($rows as $row) {
            $items[$row->product_id] = '(' . $row->type->label . ') ' . $row->order_number . ' (' . $row->producer->name . ')';
        }
        return $items;

    }

    private function getAllGrants() {
        $rows = $this->database->table('grant');
        $items = [];
        foreach ($rows as $row) {
            $items[$row->grant_id] = $row->name;
        }
        return $items;

    }

    public function getTitle() {
        if ($this->getAction() === 'insert') {
            return 'Insert a new item';
        }
        return parent::getTitle(); // TODO: Change the autogenerated stub
    }


    protected function createForm() {
        $form = new Form();
        $form->addSelect('product_id', 'Product')->setItems($this->getAllProducers())->setPrompt('Select producer');
        $form->addInteger('id_number', 'Id')->setRequired(true);
        $form->addText('EUIN', 'Eli #');
        $form->addCheckbox('has_box', 'Has box?');
        $form->addCheckbox('exist', 'Exist?');
        $form->addSelect('state', 'State', [
            null => 'undefined',
            'new' => 'New',
            'used' => 'Used',
            'pd' => 'Partially destroyed',
            'cd' => 'Completely destroyed',
            'scratch' => 'Scratch',
            'damaged' => 'damaged',
        ])->setPrompt('Select state');
        $form->addSelect('grant_id', 'grant')->setItems($this->getAllGrants())->setPrompt('Select grant');
        // TODO `arrived`    DATETIME    NULL     DEFAULT NULL,
        //$form->addText('arrived', 'Arrived')->setType('date');
        $form->addText('placement', 'Placement');
        $form->addTextArea('note', 'Note');

        return $form;
    }

    public function createComponentInsertForm() {
        $form = new Form();
        $form->addSelect('product_id', 'Product')->setItems($this->getAllProducers())->setPrompt('Select producer');
        $form->addCheckbox('has_box', 'Has box?');
        $form->addCheckbox('exist', 'Exist?');
        $form->addSelect('state', 'State', [
            null => 'undefined',
            'new' => 'New',
            'used' => 'Used',
            'pd' => 'Partially destroyed',
            'cd' => 'Completely destroyed',
            'scratch' => 'Scratch',
            'damaged' => 'damaged',
        ])->setPrompt('Select state');
        $form->addSelect('grant_id', 'grant')->setItems($this->getAllGrants())->setPrompt('Select grant');
        // TODO `arrived`    DATETIME    NULL     DEFAULT NULL,
        $form->addText('arrived', 'Arrived')->setType('date')->setRequired();
        $form->addText('placement', 'Placement');
        $form->addTextArea('note', 'Note');

        $form->addSubmit('submit', 'Submit');
        $form->onSuccess[] = function (Form $form) {
            $values = $form->getValues();
            $values->EUIN = $this->generateEUIN($values);

            $values->id_number = $this->generateId($values);
            $this->getTable()->insert($values);
            $this->flashMessage(\sprintf('Item inserted'));
            $this->redirect('this');
        };
        return $form;
    }

    private function generateEUIN(ArrayHash $values) {
        $max = 0;
        $prefix = (new \DateTime($values->arrived))->format('Ym');
        foreach ($this->getTable() as $row) {
            if (\preg_match('/^' . $prefix . '(.*)/', $row->EUIN, $matches)) {
                $max = \max($max, +$matches[1]);
            };
        }
        return $prefix . \sprintf('%03d', ($max + 1));
    }

    private function generateId(ArrayHash $values) {
        $product = $this->database->table(\DBTable::TABLE_PRODUCT)->wherePrimary($values->product_id)->fetch();
        $idNumber = $this->getTable()->where('product.type_id', $product->type_id)->max('id_number');
        return $idNumber + 1;

    }


    protected function getTable() {
        return $this->database->table(\DBTable::TABLE_ITEM);
    }


    public function createComponentDetail() {
        throw new NotImplementedException();
    }

    /**
     * @return BaseGrid
     * @throws \Ublaboo\DataGrid\Exception\DataGridException
     */
    public function createComponentGrid() {
        $control = new ItemsGrid();

        $control->setDataSource($this->getTable());

        return $control;
    }

    protected function titleCreate() {
        return \sprintf('Create new item');
    }

    protected function titleList() {
        return \sprintf('List of items.');
    }

    /**
     * @return string
     * @throws \Nette\Application\BadRequestException
     */
    protected function titleEdit() {
        return \sprintf('Edit item %s', ModelItem::createId($this->getEntity()));
    }

    /**
     * @return string
     * @throws \Nette\Application\BadRequestException
     */
    protected function titleDetail() {
        return \sprintf('Item detail %s', ModelItem::createId($this->getEntity()));
    }

    /**
     * @return ItemsGrid
     * @throws \Ublaboo\DataGrid\Exception\DataGridException
     */
    public function createComponentSearchGrid() {
        $control = new ItemsGrid();
        $control->setDataSource($this->getTable());
       // $control->addFilterSelect('type', 'Type', []);

        return $control;
    }

}
